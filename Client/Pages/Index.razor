@page "/"

@using LifeHelper.Shared.Models.LIFF
@using LifeHelper.Client.Service

@inject HttpClient httpClient
@inject LIFFService liff
@inject AuthService auth
@inject NavigationManager uriHelper;
@inject IJSRuntime js;

<PageTitle>小記帳</PageTitle>

<AuthorizeView>
    <Authorized>

        @if (monthlyAccounting == null)
            return;

        <MonthlyAccounting model="@monthlyAccounting"></MonthlyAccounting>

    </Authorized>
    <NotAuthorized>
        未登入
    </NotAuthorized>
</AuthorizeView>



@code {
    private MonthlyAccountingVm? monthlyAccounting;
    private string? IDToken;


    protected override async Task OnInitializedAsync()
    {
        var i = 0;
        await js.InvokeVoidAsync("console.log", i++);
        var LiffId = await httpClient.GetStringAsync("LIFF/GetLIFFId");
        await js.InvokeVoidAsync("console.log", i++);

        await liff.InitAsync(LiffId);
        await js.InvokeVoidAsync("console.log", i++);

        if (!await liff.IsLoggedInAsync())
        {
            var j = 0;
            await js.InvokeVoidAsync("console.log", "j" + j++);
            await liff.LoginAsync();
            await js.InvokeVoidAsync("console.log", "j" + j++);
            return;
        }

        await js.InvokeVoidAsync("console.log", i++);
        if (!await auth.Login())
        {
            var z = 0;
            await js.InvokeVoidAsync("console.log", "z" + z++);
            await liff.LogoutAsync();
            await js.InvokeVoidAsync("console.log", "z" + z++);
            auth.Logout();
            await js.InvokeVoidAsync("console.log", "z" + z++);
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            await js.InvokeVoidAsync("console.log", "z" + z++);
            return;
        }
        await js.InvokeVoidAsync("console.log", i++);

        var repMsg = await httpClient.GetAsync("AccountingBook/MonthlyAccounting");
        await js.InvokeVoidAsync("console.log", i++);

        monthlyAccounting = await repMsg.Content.ReadFromJsonAsync<MonthlyAccountingVm?>();
        await js.InvokeVoidAsync("console.log", i++);

        await base.OnInitializedAsync();
        await js.InvokeVoidAsync("console.log", i++);

    }
}