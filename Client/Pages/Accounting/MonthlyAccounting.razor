@using LifeHelper.Shared.Models.LIFF

@inject IHttpClientFactory clientFactory

<Loading IsLoading="@(model == null || isLoading)"></Loading>

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />

@if (model != null)
{
    <div class="flex flex-row justify-between">
        <label @onclick="()=>QueryAccountingAsync(model.PreAccountingMonth)" class="pl-3 cursor-pointer material-symbols-outlined text-3xl text-red-800">
            @(model.PreAccountingMonth != null ? "arrow_back_ios" : "")
        </label>
        <label class="font-bold text-red-800 text-3xl font-bold">
            @CurrentDate.Year 年 @CurrentDate.Month 月
        </label>
        <label @onclick="()=>QueryAccountingAsync(model.NextAccountingMonth)" class="pr-3 cursor-pointer material-symbols-outlined text-3xl text-red-800">
            @(model.NextAccountingMonth != null ? "arrow_forward_ios" : "")
        </label>
    </div>

    <IncomeDetail Income="@model.Income" TotalIncome="@model.TotalIncome"></IncomeDetail>

    <OutlayReport OutlayReportModel="@model.ReportDetails" TotalOutlay="@model.TotalOutlay"></OutlayReport>

    <OutlayDetail Outlay="@model.Outlay"></OutlayDetail>

}

@code {
    public MonthlyAccountingVm? model { get; set; } = null;

    private bool isLoading { get; set; }

    private HttpClient httpClient => clientFactory.CreateClient(nameof(HttpClient));

    private MonthlyAccountingVm.AccountingMonth CurrentDate { get; set; } = new(DateTime.UtcNow.AddHours(8).Year, DateTime.UtcNow.AddHours(8).Month);

    protected override async Task OnInitializedAsync()
    {
        await QueryAccountingAsync(CurrentDate);
    }

    private async Task QueryAccountingAsync(MonthlyAccountingVm.AccountingMonth? date)
    {
        isLoading = date != null;

        if (date == null)
            return;

        var repMsg = await httpClient.GetAsync($"AccountingBook/MonthlyAccounting/{date.Year}/{date.Month}");

        model = await repMsg.Content.ReadFromJsonAsync<MonthlyAccountingVm?>();

        isLoading = false;

        if (model == null)
            return;

        Console.WriteLine(model);

        CurrentDate = model.CurrentAccountingMonth;
    }

}
